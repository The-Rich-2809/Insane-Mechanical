@model Insane_Mechanical.Models.Articulo

@{
    if (ViewBag.Nivel == "Admin")
    {
        Layout = "_LayoutAdmin2";
    }
}

<h2>Editar Entrada de Blog</h2>

@using (Html.BeginForm("EditarArticulo", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID)

    <div class="mb-3">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="mb-3">
            @Html.LabelFor(model => model.CategoriaId, "Categoría", htmlAttributes: new { @class = "form-label" })
            @Html.DropDownListFor(model => model.CategoriaId, (SelectList)ViewBag.Categorias, "Seleccione una categoría", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CategoriaId, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.Titulo, htmlAttributes: new { @class = "form-label" })
            @Html.EditorFor(model => model.Titulo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Titulo, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "form-label" })
            @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            <label for="formFileMultiple" class="form-label">Seleccione con la que se identificara el articulo</label>
            <input name="Imagen" class="form-control" type="file" id="formFileMultiple" multiple>
        </div>

        <div class="mb-3">
            @Html.Label("content", "Contenido HTML", htmlAttributes: new { @class = "form-label" })
            <textarea id="editor" name="content" class="form-control">@Html.Raw(ViewBag.HtmlContent)</textarea>
        </div>

        <button type="submit" class="btn btn-primary">Guardar</button>
    </div>
}

@section scripts {
    <!-- TinyMCE -->
    <script src="https://cdn.tiny.cloud/1/fxveeedn2ab1wnazvpxmnqftxhqyoh25e4yjtyv5ksen5e5n/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
    <script>
        tinymce.init({
            selector: 'textarea',
            plugins: 'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount checklist mediaembed casechange export formatpainter pageembed linkchecker a11ychecker tinymcespellchecker permanentpen powerpaste advtable advcode editimage advtemplate ai mentions tinycomments tableofcontents footnotes mergetags autocorrect typography inlinecss markdown',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
            tinycomments_mode: 'embedded',
            tinycomments_author: 'Author name',
            mergetags_list: [
                { value: 'First.Name', title: 'First Name' },
                { value: 'Email', title: 'Email' },
            ],
            ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
            image_title: true,
            automatic_uploads: true,
            file_picker_types: 'image',
            file_picker_callback: (cb, value, meta) => {
                const input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                input.addEventListener('change', (e) => {
                    const file = e.target.files[0];

                    const reader = new FileReader();
                    reader.addEventListener('load', () => {
                        const id = 'blobid' + (new Date()).getTime();
                        const blobCache = tinymce.activeEditor.editorUpload.blobCache;
                        const base64 = reader.result.split(',')[1];
                        const blobInfo = blobCache.create(id, file, base64);
                        blobCache.add(blobInfo);

                        cb(blobInfo.blobUri(), { title: file.name });
                    });
                    reader.readAsDataURL(file);
                });

                input.click();
            }
        });
    </script>
}
